# Node class represents a node in the linked list
class Node:
    def __init__(self, data):
        self.data = data  # Node's data
        self.next = None  # Pointer to the next node in the list

# LinkedList class represents the linked list itself
class LinkedList:
    def __init__(self):
        self.head = None  # Head of the list

    # Method to add a new node at the end of the list
    def append(self, data):
        new_node = Node(data)
        if not self.head:  # If the list is empty
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:  # Traverse to the last node
            last_node = last_node.next
        last_node.next = new_node  # Add the new node at the end

    # Method to print all the nodes in the linked list
    def print_list(self):
        current_node = self.head
        while current_node:
            print(current_node.data, end=" -> ")
            current_node = current_node.next
        print("None")  # End of the list

    # Method to insert a node at the beginning of the list
    def prepend(self, data):
        new_node = Node(data)
        new_node.next = self.head  # Point the new node to the current head
        self.head = new_node  # Make the new node the head of the list

    # Method to delete a node by value
    def delete_node(self, key):
        current_node = self.head

        # If the node to be deleted is the head
        if current_node and current_node.data == key:
            self.head = current_node.next
            current_node = None
            return

        # Search for the node to be deleted
        prev_node = None
        while current_node and current_node.data != key:
            prev_node = current_node
            current_node = current_node.next

        # If the key is not found
        if current_node is None:
            print(f"Node with value {key} not found.")
            return

        # Unlink the node from the list
        prev_node.next = current_node.next
        current_node = None

# Example usage
ll = LinkedList()
ll.append(10)
ll.append(20)
ll.append(30)
ll.prepend(5)

ll.print_list()  # Output: 5 -> 10 -> 20 -> 30 -> None

ll.delete_node(20)
ll.print_list()  # Output: 5 -> 10 -> 30 -> None
