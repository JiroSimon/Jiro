class CircularQueue:
    def __init__(self, size=5):
        self.SIZE = size
        self.items = [None] * self.SIZE
        self.front = self.rear = -1

    def is_full(self):
        return (self.rear + 1) % self.SIZE == self.front

    def is_empty(self):
        return self.front == -1

    def enqueue(self, value):
        if self.is_full():
            print("Queue is full!")
            return
        if self.front == -1:
            self.front = 0
        self.rear = (self.rear + 1) % self.SIZE
        self.items[self.rear] = value

    def dequeue(self):
        if self.is_empty():
            print("Queue is empty!")
            return
        print(f"Dequeued: {self.items[self.front]}")
        if self.front == self.rear:
            self.front = self.rear = -1
        else:
            self.front = (self.front + 1) % self.SIZE

    def display(self):
        if self.is_empty():
            print("Queue is empty!")
            return
        print("Queue elements:", end=" ")
        i = self.front
        while True:
            print(self.items[i], end=" ")
            if i == self.rear:
                break
            i = (i + 1) % self.SIZE
        print()

# Example usage
q = CircularQueue()
q.enqueue(10)
q.enqueue(20)
q.enqueue(30)
q.enqueue(40)
q.enqueue(50)
q.display()  # Output: Queue elements: 10 20 30 40 50 
q.dequeue()  # Output: Dequeued: 10
q.enqueue(60)
q.display()  # Output: Queue elements: 20 30 40 50 60
